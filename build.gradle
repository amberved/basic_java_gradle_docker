/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

allprojects {
    repositories {
        jcenter() 
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2"
    }
}

subprojects {
    version = '1.0'

    apply plugin : 'application'
    apply plugin : 'java'

    apply plugin : 'idea'

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: "com.palantir.docker"
    apply plugin: "com.palantir.docker-run"


    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }

    jar << {
        println("Top level project ")
        manifest.attributes 'provider': 'gradle'
        manifest.attributes 'Implementation-Title': 'Java Project'
        manifest.attributes 'Implementation-Version': version
        manifest.attributes 'Main-Class': mainClassName
    }

    docker {
        println("Creating Docker for " + project.name)

        name project.name
        tags 'latest'
        //dockerfile file('Dockerfile')
        files jar.archivePath
        buildArgs([JAR_FILE: "${jar.archiveName}"])
    }


    dockerRun {
        println("DockerRun for " + jar.baseName)

        name jar.baseName
        daemonize true
        image project.name
        clean true
        //ports '7080:5000'

        // volumes 'hostvolume': '/containervolume'
        // env 'MYVAR1': 'MYVALUE1', 'MYVAR2': 'MYVALUE2'
        // command 'ls'
    }

    dockerClean {
        println("dockerClean for " + jar.baseName)

    }

    dockerRunStatus {
        println("DockerStatus for " + jar.baseName)
    }

    dockerStop {
        println("DockerStop for " + jar.baseName)
    }

    dockerRemoveContainer {
        println("dockerRemoveContainer for " + jar.baseName)
    }

}